/**
 * Service for generating predictions using reality exploitation techniques.
 */
import { RealityExploitationEngine } from "../ml/models/RealityExploitationEngine";
import { DataService } from "../data/DataService";
import { MarketIntelligenceService } from "./MarketIntelligenceService";
import { PerformanceAnalyticsService } from "./PerformanceAnalyticsService";
import { EnvironmentalService } from "./EnvironmentalService";
import { SocialDynamicsService } from "./SocialDynamicsService";
import { TechnologicalAnalyticsService } from "./TechnologicalAnalyticsService";
import { PsychologicalAnalyticsService } from "./PsychologicalAnalyticsService";
export class RealityExploitationService {
    constructor() {
        this.initializeServices();
        this.engine = new RealityExploitationEngine({
            name: "reality_exploitation",
            type: "ensemble",
            features: this.getFeatureList(),
            target: "probability",
            physicalEnabled: true,
            performanceEnabled: true,
            psychologicalEnabled: true,
            socialEnabled: true,
            economicEnabled: true,
            technologicalEnabled: true,
            environmentalEnabled: true,
        });
    }
    initializeServices() {
        this.dataService = new DataService();
        this.marketIntelligence = new MarketIntelligenceService();
        this.performanceAnalytics = new PerformanceAnalyticsService();
        this.environmentalService = new EnvironmentalService();
        this.socialDynamics = new SocialDynamicsService();
        this.technologicalAnalytics = new TechnologicalAnalyticsService();
        this.psychologicalAnalytics = new PsychologicalAnalyticsService();
    }
    getFeatureList() {
        return [
            // Physical metrics
            "velocity",
            "acceleration",
            "force",
            "energy",
            "efficiency",
            // Performance metrics
            "recentForm",
            "historicalPerformance",
            "matchupAdvantage",
            "restDays",
            "travelDistance",
            // Psychological metrics
            "pressureHandling",
            "clutchPerformance",
            "consistency",
            "focus",
            "competitiveDrive",
            // Social metrics
            "teamCohesion",
            "homeAdvantage",
            "crowdImpact",
            "rivalryFactor",
            "mediaPressure",
            // Economic metrics
            "lineMovement",
            "marketEfficiency",
            "valueOpportunity",
            "riskExposure",
            "liquidityDepth",
            // Technological metrics
            "dataQuality",
            "modelAccuracy",
            "featureImportance",
            "predictionConfidence",
            "systemReliability",
            // Environmental metrics
            "weatherImpact",
            "venueAdvantage",
            "surfaceCondition",
            "timeOfDay",
            "seasonality",
        ];
    }
    async generatePrediction(request) {
        // Gather all relevant data
        const features = await this.gatherFeatures(request);
        // Generate prediction using the engine
        const prediction = await this.engine.predict(features);
        // Calculate confidence based on data quality and model agreement
        const confidence = this.calculateConfidence(prediction, features);
        return {
            prediction,
            confidence,
            metadata: {
                physicalMetrics: features.physicalMetrics,
                performanceMetrics: features.performanceMetrics,
                psychologicalMetrics: features.psychologicalMetrics,
                socialMetrics: features.socialMetrics,
                economicMetrics: features.economicMetrics,
                technologicalMetrics: features.technologicalMetrics,
                environmentalMetrics: features.environmentalMetrics,
            },
            timestamp: new Date().toISOString(),
        };
    }
    async gatherFeatures(request) {
        const [physicalData, performanceData, psychologicalData, socialData, economicData, technologicalData, environmentalData,] = await Promise.all([
            this.gatherPhysicalData(request),
            this.gatherPerformanceData(request),
            this.gatherPsychologicalData(request),
            this.gatherSocialData(request),
            this.gatherEconomicData(request),
            this.gatherTechnologicalData(request),
            this.gatherEnvironmentalData(request),
        ]);
        return {
            ...physicalData,
            ...performanceData,
            ...psychologicalData,
            ...socialData,
            ...economicData,
            ...technologicalData,
            ...environmentalData,
        };
    }
    async gatherPhysicalData(request) {
        const playerData = await this.dataService.getPlayerPhysicalMetrics(request.eventId);
        return {
            velocity: playerData.averageVelocity,
            acceleration: playerData.averageAcceleration,
            force: playerData.averageForce,
            energy: playerData.energyExpenditure,
            efficiency: playerData.biomechanicalEfficiency,
            physicalMetrics: playerData,
        };
    }
    async gatherPerformanceData(request) {
        const performanceData = await this.performanceAnalytics.analyzePerformance(request);
        return {
            recentForm: performanceData.recentForm,
            historicalPerformance: performanceData.historicalPerformance,
            matchupAdvantage: performanceData.matchupAdvantage,
            restDays: performanceData.restDays,
            travelDistance: performanceData.travelDistance,
            performanceMetrics: performanceData,
        };
    }
    async gatherPsychologicalData(request) {
        const psychologicalData = await this.psychologicalAnalytics.analyzePsychologicalFactors(request);
        return {
            pressureHandling: psychologicalData.pressureHandling,
            clutchPerformance: psychologicalData.clutchPerformance,
            consistency: psychologicalData.consistency,
            focus: psychologicalData.focus,
            competitiveDrive: psychologicalData.competitiveDrive,
            psychologicalMetrics: psychologicalData,
        };
    }
    async gatherSocialData(request) {
        const socialData = await this.socialDynamics.analyzeSocialFactors(request);
        return {
            teamCohesion: socialData.teamCohesion,
            homeAdvantage: socialData.homeAdvantage,
            crowdImpact: socialData.crowdImpact,
            rivalryFactor: socialData.rivalryFactor,
            mediaPressure: socialData.mediaPressure,
            socialMetrics: socialData,
        };
    }
    async gatherEconomicData(request) {
        const marketData = await this.marketIntelligence.analyzeMarketData(request);
        return {
            lineMovement: marketData.lineMovement,
            marketEfficiency: marketData.marketEfficiency,
            valueOpportunity: marketData.valueOpportunity,
            riskExposure: marketData.riskExposure,
            liquidityDepth: marketData.liquidityDepth,
            economicMetrics: marketData,
        };
    }
    async gatherTechnologicalData(request) {
        const techData = await this.technologicalAnalytics.analyzeTechnologicalFactors(request);
        return {
            dataQuality: techData.dataQuality,
            modelAccuracy: techData.modelAccuracy,
            featureImportance: techData.featureImportance,
            predictionConfidence: techData.predictionConfidence,
            systemReliability: techData.systemReliability,
            technologicalMetrics: techData,
        };
    }
    async gatherEnvironmentalData(request) {
        const envData = await this.environmentalService.analyzeEnvironmentalFactors(request);
        return {
            weatherImpact: envData.weatherImpact,
            venueAdvantage: envData.venueAdvantage,
            surfaceCondition: envData.surfaceCondition,
            timeOfDay: envData.timeOfDay,
            seasonality: envData.seasonality,
            environmentalMetrics: envData,
        };
    }
    calculateConfidence(prediction, features) {
        // Calculate confidence based on data quality and model agreement
        const dataQualityScore = this.calculateDataQualityScore(features);
        const modelAgreementScore = prediction.confidence;
        // Weight the scores (adjust weights based on importance)
        const dataQualityWeight = 0.4;
        const modelAgreementWeight = 0.6;
        return (dataQualityScore * dataQualityWeight +
            modelAgreementScore * modelAgreementWeight);
    }
    calculateDataQualityScore(features) {
        // Calculate data quality score based on completeness and reliability of features
        const metrics = [
            features.physicalMetrics,
            features.performanceMetrics,
            features.psychologicalMetrics,
            features.socialMetrics,
            features.economicMetrics,
            features.technologicalMetrics,
            features.environmentalMetrics,
        ];
        const scores = metrics.map((metric) => {
            if (!metric)
                return 0;
            const values = Object.values(metric);
            return (values.reduce((sum, value) => sum +
                (typeof value === "number" && value !== null && value !== undefined
                    ? 1
                    : 0), 0) / values.length);
        });
        return (scores.reduce((sum, score) => sum + score, 0) /
            scores.length);
    }
    async train(data) {
        await this.engine.train(data);
    }
    async evaluate(data) {
        const metrics = await this.engine.evaluate(data);
        return {
            accuracy: metrics.accuracy || 0,
            precision: metrics.precision || 0,
            recall: metrics.recall || 0,
            f1Score: metrics.f1Score || 0,
        };
    }
    async update(data) {
        await this.engine.update(data);
    }
}
