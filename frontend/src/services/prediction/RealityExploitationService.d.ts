/**
 * Service for generating predictions using reality exploitation techniques.
 */
import type { PredictionRequest } from "./types";
import type { ModelPrediction } from "../ml/models/BaseModel";
interface PredictionResponse {
    prediction: ModelPrediction;
    confidence: number;
    metadata: {
        physicalMetrics: any;
        performanceMetrics: any;
        psychologicalMetrics: any;
        socialMetrics: any;
        economicMetrics: any;
        technologicalMetrics: any;
        environmentalMetrics: any;
    };
    timestamp: string;
}
export declare class RealityExploitationService {
    private engine;
    private dataService;
    private marketIntelligence;
    private performanceAnalytics;
    private environmentalService;
    private socialDynamics;
    private technologicalAnalytics;
    private psychologicalAnalytics;
    constructor();
    private initializeServices;
    private getFeatureList;
    generatePrediction(request: PredictionRequest): Promise<PredictionResponse>;
    private gatherFeatures;
    private gatherPhysicalData;
    private gatherPerformanceData;
    private gatherPsychologicalData;
    private gatherSocialData;
    private gatherEconomicData;
    private gatherTechnologicalData;
    private gatherEnvironmentalData;
    private calculateConfidence;
    private calculateDataQualityScore;
    train(data: any[]): Promise<void>;
    evaluate(data: any[]): Promise<{
        accuracy: number;
        precision: number;
        recall: number;
        f1Score: number;
    }>;
    update(data: any[]): Promise<void>;
}
export {};
