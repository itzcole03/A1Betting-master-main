import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Card, CardContent, Typography, Grid, LinearProgress, Box, Slider, Switch, FormControlLabel, } from '@mui/material';
import { bankrollService } from '@/services/bankroll';
import { usePredictionStore } from '@/store/predictionStore';
export const BankrollStats = () => {
    const stats = bankrollService.getStats();
    const settings = bankrollService.getSettings();
    const setStrategyAutomation = usePredictionStore(state => state.setStrategyAutomation);
    const handleSettingChange = (setting, value) => {
        bankrollService.updateSettings({ [setting]: value });
    };
    return (_jsxs(Grid, { container: true, spacing: 3, children: [_jsx(Grid, { item: true, xs: 12, md: 6, children: _jsx(Card, { children: _jsxs(CardContent, { children: [_jsx(Typography, { variant: "h6", gutterBottom: true, children: "Current Balance" }), _jsxs(Typography, { variant: "h4", color: "primary", children: ["$", stats.currentBalance.toFixed(2)] }), _jsxs(Box, { mt: 2, children: [_jsxs(Typography, { variant: "body2", color: "textSecondary", children: ["Net Profit: $", stats.netProfit.toFixed(2)] }), _jsxs(Typography, { variant: "body2", color: "textSecondary", children: ["ROI: ", stats.roi.toFixed(2), "%"] })] })] }) }) }), _jsx(Grid, { item: true, xs: 12, md: 6, children: _jsx(Card, { children: _jsxs(CardContent, { children: [_jsx(Typography, { variant: "h6", gutterBottom: true, children: "Performance" }), _jsxs(Grid, { container: true, spacing: 2, children: [_jsxs(Grid, { item: true, xs: 6, children: [_jsx(Typography, { variant: "body2", color: "textSecondary", children: "Win Rate" }), _jsxs(Typography, { variant: "h6", children: [stats.winRate.toFixed(1), "%"] })] }), _jsxs(Grid, { item: true, xs: 6, children: [_jsx(Typography, { variant: "body2", color: "textSecondary", children: "Avg Bet Size" }), _jsxs(Typography, { variant: "h6", children: ["$", stats.averageBetSize.toFixed(2)] })] }), _jsxs(Grid, { item: true, xs: 6, children: [_jsx(Typography, { variant: "body2", color: "textSecondary", children: "Best Streak" }), _jsx(Typography, { variant: "h6", children: stats.bestStreak })] }), _jsxs(Grid, { item: true, xs: 6, children: [_jsx(Typography, { variant: "body2", color: "textSecondary", children: "Current Streak" }), _jsx(Typography, { variant: "h6", children: stats.currentStreak })] })] })] }) }) }), _jsx(Grid, { item: true, xs: 12, children: _jsx(Card, { children: _jsxs(CardContent, { children: [_jsx(Typography, { variant: "h6", gutterBottom: true, children: "Risk Management" }), _jsxs(Grid, { container: true, spacing: 3, children: [_jsxs(Grid, { item: true, xs: 12, md: 6, children: [_jsx(Typography, { gutterBottom: true, children: "Max Bet Percentage" }), _jsx(Slider, { value: settings.maxBetPercentage * 100, onChange: (_, value) => handleSettingChange('maxBetPercentage', value / 100), min: 1, max: 10, valueLabelDisplay: "auto", valueLabelFormat: (value) => `${value}%` })] }), _jsxs(Grid, { item: true, xs: 12, md: 6, children: [_jsx(Typography, { gutterBottom: true, children: "Stop Loss Percentage" }), _jsx(Slider, { value: settings.stopLossPercentage * 100, onChange: (_, value) => handleSettingChange('stopLossPercentage', value / 100), min: 5, max: 50, valueLabelDisplay: "auto", valueLabelFormat: (value) => `${value}%` })] }), _jsxs(Grid, { item: true, xs: 12, md: 6, children: [_jsx(Typography, { gutterBottom: true, children: "Take Profit Percentage" }), _jsx(Slider, { value: settings.takeProfitPercentage * 100, onChange: (_, value) => handleSettingChange('takeProfitPercentage', value / 100), min: 10, max: 100, valueLabelDisplay: "auto", valueLabelFormat: (value) => `${value}%` })] }), _jsxs(Grid, { item: true, xs: 12, md: 6, children: [_jsx(Typography, { gutterBottom: true, children: "Max Daily Bets" }), _jsx(Slider, { value: settings.maxDailyBets, onChange: (_, value) => handleSettingChange('maxDailyBets', value), min: 1, max: 20, valueLabelDisplay: "auto" })] }), _jsx(Grid, { item: true, xs: 12, children: _jsx(FormControlLabel, { control: _jsx(Switch, { checked: settings.autoRebalance, onChange: (e) => handleSettingChange('autoRebalance', e.target.checked) }), label: "Auto Rebalance" }) })] })] }) }) }), _jsx(Grid, { item: true, xs: 12, children: _jsx(Card, { children: _jsxs(CardContent, { children: [_jsx(Typography, { variant: "h6", gutterBottom: true, children: "Progress" }), _jsxs(Box, { mb: 2, children: [_jsx(Typography, { variant: "body2", color: "textSecondary", gutterBottom: true, children: "Stop Loss Progress" }), _jsx(LinearProgress, { variant: "determinate", value: Math.min(100, (Math.abs(stats.netProfit) / (stats.startingBalance * settings.stopLossPercentage)) * 100), color: "error" })] }), _jsxs(Box, { children: [_jsx(Typography, { variant: "body2", color: "textSecondary", gutterBottom: true, children: "Take Profit Progress" }), _jsx(LinearProgress, { variant: "determinate", value: Math.min(100, (stats.netProfit / (stats.startingBalance * settings.takeProfitPercentage)) * 100), color: "success" })] })] }) }) })] }));
};
