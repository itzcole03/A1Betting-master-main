import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import React from 'react';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, RadarChart, Radar, PolarGrid, PolarAngleAxis, PolarRadiusAxis, } from 'recharts';
import ShapVisualization from '../ShapVisualization';
import { useShapData } from '../../hooks/useShapData';
const FeatureInsights = ({ features, interactions, embeddings, signals, eventId, modelType, }) => {
    // Sort features by importance
    const sortedFeatures = [...features].sort((a, b) => b.importance - a.importance);
    // Prepare data for visualizations
    const featureMetrics = sortedFeatures.map(feature => ({
        name: feature.name,
        importance: feature.importance,
        correlation: Math.abs(feature.correlation),
        entropy: feature.entropy,
        uniqueness: feature.uniqueness,
        missing: feature.missing,
    }));
    const featureStats = sortedFeatures.map(feature => ({
        name: feature.name,
        ...feature.stats,
    }));
    const interactionData = interactions.map(interaction => ({
        name: `${interaction.feature1} Ã— ${interaction.feature2}`,
        strength: interaction.strength,
        type: interaction.type,
    }));
    // SHAP integration
    const { features: shapFeatures, loading: shapLoading, error: shapError, } = eventId ? useShapData({ eventId, modelType }) : { features: [], loading: false, error: null };
    return (_jsxs("div", { className: "space-y-8", children: [eventId && (_jsxs("section", { className: "bg-white rounded-lg shadow p-6", children: [_jsx("h2", { className: "text-2xl font-bold mb-4", children: "Model Feature Importance (SHAP)" }), shapLoading ? (_jsx("div", { className: "text-gray-500", children: "Loading SHAP values..." })) : shapError ? (_jsx("div", { className: "text-red-500", children: shapError })) : shapFeatures.length > 0 ? (_jsx(ShapVisualization, { features: shapFeatures.map(f => ({
                            name: f.feature,
                            value: f.value,
                            impact: f.impact,
                        })), maxFeatures: 10, title: "SHAP Feature Impact" })) : (_jsx("div", { className: "text-gray-400", children: "No SHAP data available for this event/model." }))] })), _jsxs("section", { className: "bg-white rounded-lg shadow p-6", children: [_jsx("h2", { className: "text-2xl font-bold mb-4", children: "Feature Importance" }), _jsx("div", { className: "h-96", children: _jsx(ResponsiveContainer, { height: "100%", width: "100%", children: _jsxs(BarChart, { data: featureMetrics, children: [_jsx(CartesianGrid, { strokeDasharray: "3 3" }), _jsx(XAxis, { angle: -45, dataKey: "name", height: 100, textAnchor: "end" }), _jsx(YAxis, {}), _jsx(Tooltip, {}), _jsx(Legend, {}), _jsx(Bar, { dataKey: "importance", fill: "#3B82F6", name: "Importance Score" })] }) }) })] }), _jsxs("section", { className: "bg-white rounded-lg shadow p-6", children: [_jsx("h2", { className: "text-2xl font-bold mb-4", children: "Feature Metrics" }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6", children: [_jsxs("div", { children: [_jsx("h3", { className: "text-lg font-semibold mb-2", children: "Correlation Analysis" }), _jsx(ResponsiveContainer, { height: 300, width: "100%", children: _jsxs(RadarChart, { data: featureMetrics, children: [_jsx(PolarGrid, {}), _jsx(PolarAngleAxis, { dataKey: "name" }), _jsx(PolarRadiusAxis, {}), _jsx(Radar, { dataKey: "correlation", fill: "#93C5FD", fillOpacity: 0.6, name: "Correlation", stroke: "#3B82F6" })] }) })] }), _jsxs("div", { children: [_jsx("h3", { className: "text-lg font-semibold mb-2", children: "Feature Quality" }), _jsx(ResponsiveContainer, { height: 300, width: "100%", children: _jsxs(BarChart, { data: featureMetrics, children: [_jsx(CartesianGrid, { strokeDasharray: "3 3" }), _jsx(XAxis, { dataKey: "name" }), _jsx(YAxis, {}), _jsx(Tooltip, {}), _jsx(Legend, {}), _jsx(Bar, { dataKey: "entropy", fill: "#10B981", name: "Entropy" }), _jsx(Bar, { dataKey: "uniqueness", fill: "#6366F1", name: "Uniqueness" }), _jsx(Bar, { dataKey: "missing", fill: "#EF4444", name: "Missing Values" })] }) })] })] })] }), _jsxs("section", { className: "bg-white rounded-lg shadow p-6", children: [_jsx("h2", { className: "text-2xl font-bold mb-4", children: "Feature Statistics" }), _jsx("div", { className: "overflow-x-auto", children: _jsxs("table", { className: "min-w-full divide-y divide-gray-200", children: [_jsx("thead", { className: "bg-gray-50", children: _jsxs("tr", { children: [_jsx("th", { className: "px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider", children: "Feature" }), _jsx("th", { className: "px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider", children: "Mean" }), _jsx("th", { className: "px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider", children: "Std Dev" }), _jsx("th", { className: "px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider", children: "Min" }), _jsx("th", { className: "px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider", children: "Q25" }), _jsx("th", { className: "px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider", children: "Median" }), _jsx("th", { className: "px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider", children: "Q75" }), _jsx("th", { className: "px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider", children: "Max" })] }) }), _jsx("tbody", { className: "bg-white divide-y divide-gray-200", children: featureStats.map(stat => (_jsxs("tr", { children: [_jsx("td", { className: "px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900", children: stat.name }), _jsx("td", { className: "px-6 py-4 whitespace-nowrap text-sm text-gray-500", children: stat.mean.toFixed(4) }), _jsx("td", { className: "px-6 py-4 whitespace-nowrap text-sm text-gray-500", children: stat.std.toFixed(4) }), _jsx("td", { className: "px-6 py-4 whitespace-nowrap text-sm text-gray-500", children: stat.min.toFixed(4) }), _jsx("td", { className: "px-6 py-4 whitespace-nowrap text-sm text-gray-500", children: stat.q25.toFixed(4) }), _jsx("td", { className: "px-6 py-4 whitespace-nowrap text-sm text-gray-500", children: stat.q50.toFixed(4) }), _jsx("td", { className: "px-6 py-4 whitespace-nowrap text-sm text-gray-500", children: stat.q75.toFixed(4) }), _jsx("td", { className: "px-6 py-4 whitespace-nowrap text-sm text-gray-500", children: stat.max.toFixed(4) })] }, stat.name))) })] }) })] }), _jsxs("section", { className: "bg-white rounded-lg shadow p-6", children: [_jsx("h2", { className: "text-2xl font-bold mb-4", children: "Feature Interactions" }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6", children: [_jsxs("div", { children: [_jsx("h3", { className: "text-lg font-semibold mb-2", children: "Interaction Strength" }), _jsx(ResponsiveContainer, { height: 300, width: "100%", children: _jsxs(BarChart, { data: interactionData, children: [_jsx(CartesianGrid, { strokeDasharray: "3 3" }), _jsx(XAxis, { angle: -45, dataKey: "name", height: 100, textAnchor: "end" }), _jsx(YAxis, {}), _jsx(Tooltip, {}), _jsx(Bar, { dataKey: "strength", fill: "#3B82F6", name: "Interaction Strength" })] }) })] }), _jsxs("div", { children: [_jsx("h3", { className: "text-lg font-semibold mb-2", children: "Interaction Types" }), _jsx("div", { className: "space-y-2", children: interactionData.map((interaction, index) => (_jsxs("div", { className: "flex items-center justify-between p-2 bg-gray-50 rounded", children: [_jsx("span", { className: "text-gray-600", children: interaction.name }), _jsx("span", { className: `px-2 py-1 rounded text-white ${interaction.type === 'linear'
                                                        ? 'bg-blue-500'
                                                        : interaction.type === 'nonlinear'
                                                            ? 'bg-purple-500'
                                                            : 'bg-green-500'}`, children: interaction.type })] }, index))) })] })] })] }), _jsxs("section", { className: "bg-white rounded-lg shadow p-6", children: [_jsx("h2", { className: "text-2xl font-bold mb-4", children: "External Signals" }), _jsx("div", { className: "space-y-6", children: signals.map((signal, index) => (_jsxs("div", { children: [_jsxs("h3", { className: "text-lg font-semibold mb-2", children: [signal.source, " Features"] }), _jsx(ResponsiveContainer, { height: 200, width: "100%", children: _jsxs(BarChart, { data: signal.features, children: [_jsx(CartesianGrid, { strokeDasharray: "3 3" }), _jsx(XAxis, { dataKey: "name" }), _jsx(YAxis, {}), _jsx(Tooltip, {}), _jsx(Legend, {}), _jsx(Bar, { dataKey: "value", fill: "#3B82F6", name: "Value" }), _jsx(Bar, { dataKey: "impact", fill: "#10B981", name: "Impact" })] }) })] }, index))) })] })] }));
};
export default React.memo(FeatureInsights);
