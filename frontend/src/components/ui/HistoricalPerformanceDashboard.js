import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useBetHistoryStore } from '../../store/slices/betHistorySlice';
export const HistoricalPerformanceDashboard = () => {
    const userHistory = useBetHistoryStore((s) => s.userHistory);
    const modelHistory = useBetHistoryStore((s) => s.modelHistory);
    return (_jsxs("section", { className: "w-full p-4 bg-white shadow rounded mb-4", children: [_jsx("h3", { className: "text-md font-bold mb-2", children: "Historical Performance" }), userHistory && userHistory.entries.length > 0 ? (_jsxs("div", { children: [_jsx("h4", { className: "font-semibold mb-1", children: "Your Bet History" }), _jsx("div", { className: "overflow-x-auto", children: _jsxs("table", { className: "min-w-full text-xs border", children: [_jsx("thead", { children: _jsxs("tr", { className: "bg-gray-100", children: [_jsx("th", { className: "px-2 py-1", children: "Date" }), _jsx("th", { className: "px-2 py-1", children: "Event" }), _jsx("th", { className: "px-2 py-1", children: "Type" }), _jsx("th", { className: "px-2 py-1", children: "Stake" }), _jsx("th", { className: "px-2 py-1", children: "Odds" }), _jsx("th", { className: "px-2 py-1", children: "Result" }), _jsx("th", { className: "px-2 py-1", children: "Payout" }), _jsx("th", { className: "px-2 py-1", children: "Confidence" }), _jsx("th", { className: "px-2 py-1", children: "Win Prob" })] }) }), _jsx("tbody", { children: userHistory.entries.map((entry) => (_jsxs("tr", { className: "border-b", children: [_jsx("td", { className: "px-2 py-1", children: entry.date }), _jsx("td", { className: "px-2 py-1", children: entry.eventId }), _jsx("td", { className: "px-2 py-1", children: entry.betType }), _jsxs("td", { className: "px-2 py-1", children: ["$", entry.stake.toFixed(2)] }), _jsx("td", { className: "px-2 py-1", children: entry.odds.toFixed(2) }), _jsx("td", { className: "px-2 py-1", children: entry.result }), _jsxs("td", { className: "px-2 py-1", children: ["$", entry.payout.toFixed(2)] }), _jsxs("td", { className: "px-2 py-1", children: ["[", entry.confidenceBand.lower.toFixed(2), " - ", entry.confidenceBand.upper.toFixed(2), "]"] }), _jsxs("td", { className: "px-2 py-1", children: [(entry.winProbability.probability * 100).toFixed(1), "%"] })] }, entry.betId))) })] }) })] })) : (_jsx("div", { className: "text-gray-400", children: "No user bet history available." })), modelHistory && modelHistory.length > 0 && (_jsxs("div", { className: "mt-4", children: [_jsx("h4", { className: "font-semibold mb-1", children: "Model Performance" }), _jsx("div", { className: "overflow-x-auto", children: _jsxs("table", { className: "min-w-full text-xs border", children: [_jsx("thead", { children: _jsxs("tr", { className: "bg-gray-100", children: [_jsx("th", { className: "px-2 py-1", children: "Model" }), _jsx("th", { className: "px-2 py-1", children: "Market" }), _jsx("th", { className: "px-2 py-1", children: "Date" }), _jsx("th", { className: "px-2 py-1", children: "Prediction" }), _jsx("th", { className: "px-2 py-1", children: "Actual" }), _jsx("th", { className: "px-2 py-1", children: "Won?" }), _jsx("th", { className: "px-2 py-1", children: "Payout" }), _jsx("th", { className: "px-2 py-1", children: "Confidence" }), _jsx("th", { className: "px-2 py-1", children: "Win Prob" })] }) }), _jsx("tbody", { children: modelHistory.flatMap((mh) => mh.entries.map((entry, idx) => (_jsxs("tr", { className: "border-b", children: [_jsx("td", { className: "px-2 py-1", children: mh.model }), _jsx("td", { className: "px-2 py-1", children: mh.market }), _jsx("td", { className: "px-2 py-1", children: entry.date }), _jsx("td", { className: "px-2 py-1", children: entry.prediction.toFixed(2) }), _jsx("td", { className: "px-2 py-1", children: entry.actual.toFixed(2) }), _jsx("td", { className: "px-2 py-1", children: entry.won ? 'Yes' : 'No' }), _jsxs("td", { className: "px-2 py-1", children: ["$", entry.payout.toFixed(2)] }), _jsxs("td", { className: "px-2 py-1", children: ["[", entry.confidenceBand.lower.toFixed(2), " - ", entry.confidenceBand.upper.toFixed(2), "]"] }), _jsxs("td", { className: "px-2 py-1", children: [(entry.winProbability.probability * 100).toFixed(1), "%"] })] }, mh.model + mh.market + idx)))) })] }) })] }))] }));
};
