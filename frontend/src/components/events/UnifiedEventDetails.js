import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import { UnifiedServiceRegistry } from '../../services/unified/UnifiedServiceRegistry';
import { Card, Button, Spinner, Toast, Badge, Modal, Tabs, Tab } from '../ui/UnifiedUI';
export const UnifiedEventDetails = () => {
    // Initialize services
    const serviceRegistry = UnifiedServiceRegistry.getInstance();
    const predictionService = serviceRegistry.getService('prediction');
    const analyticsService = serviceRegistry.getService('analytics');
    const stateService = serviceRegistry.getService('state');
    const notificationService = serviceRegistry.getService('notification');
    const errorService = serviceRegistry.getService('error');
    // Router hooks
    const { eventId } = useParams();
    // State
    const [event, setEvent] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [toast, setToast] = useState(null);
    const [selectedMarket, setSelectedMarket] = useState(null);
    const [showBetModal, setShowBetModal] = useState(false);
    const [selectedSelection, setSelectedSelection] = useState(null);
    const [activeTab, setActiveTab] = useState('overview');
    // Load event data
    useEffect(() => {
        if (eventId) {
            loadEventData(eventId);
        }
    }, [eventId]);
    const loadEventData = async (id) => {
        try {
            setLoading(true);
            const [eventData, predictions] = await Promise.all([
                analyticsService.getEventDetails(id),
                predictionService.getEventPredictions(id),
            ]);
            setEvent({ ...eventData, predictions });
        }
        catch (error) {
            handleError('Failed to load event data', error);
        }
        finally {
            setLoading(false);
        }
    };
    const handleError = (message, error) => {
        setError(message);
        setToast({ message, type: 'error' });
        errorService.handleError(error, {
            code: 'EVENT_DETAILS_ERROR',
            source: 'UnifiedEventDetails',
            details: { message },
        });
    };
    const formatOdds = (odds) => {
        return odds.toFixed(2);
    };
    const formatPercentage = (value) => {
        return new Intl.NumberFormat('en-US', {
            style: 'percent',
            minimumFractionDigits: 1,
            maximumFractionDigits: 1,
        }).format(value / 100);
    };
    const getStatusBadge = (status) => {
        const variants = {
            upcoming: 'info',
            live: 'success',
            ended: 'secondary',
            cancelled: 'danger',
        };
        return _jsx(Badge, { variant: variants[status], children: status.toUpperCase() });
    };
    if (loading) {
        return (_jsx("div", { className: "flex items-center justify-center min-h-screen", children: _jsx(Spinner, { size: "large" }) }));
    }
    if (!event) {
        return (_jsx("div", { className: "container mx-auto px-4 py-8", children: _jsx(Card, { children: _jsxs("div", { className: "text-center", children: [_jsx("h2", { className: "text-2xl font-bold text-red-600", children: "Event Not Found" }), _jsx("p", { className: "mt-2 text-gray-600", children: "The requested event could not be found." })] }) }) }));
    }
    return (_jsxs("div", { className: "container mx-auto px-4 py-8", children: [_jsxs("div", { className: "max-w-7xl mx-auto", children: [_jsx(Card, { className: "mb-8", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { className: "flex items-center space-x-4", children: [_jsx("img", { alt: event.homeTeam.name, className: "w-16 h-16 object-contain", src: event.homeTeam.logo }), _jsxs("div", { children: [_jsx("h1", { className: "text-2xl font-bold", children: event.name }), _jsxs("p", { className: "text-gray-600 dark:text-gray-400", children: [event.competition, " \u2022 ", event.sport] })] })] }), _jsxs("div", { className: "flex items-center space-x-4", children: [getStatusBadge(event.status), _jsx("p", { className: "text-gray-600 dark:text-gray-400", children: new Date(event.startTime).toLocaleString() })] })] }) }), _jsxs(Tabs, { className: "mb-8", value: activeTab, onChange: setActiveTab, children: [_jsx(Tab, { label: "Overview", value: "overview" }), _jsx(Tab, { label: "Markets", value: "markets" }), _jsx(Tab, { label: "Statistics", value: "statistics" }), _jsx(Tab, { label: "Predictions", value: "predictions" })] }), activeTab === 'overview' && (_jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-8", children: [_jsxs(Card, { children: [_jsx("h2", { className: "text-xl font-bold mb-4", children: "Teams" }), _jsxs("div", { className: "space-y-6", children: [_jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { className: "flex items-center space-x-4", children: [_jsx("img", { alt: event.homeTeam.name, className: "w-12 h-12 object-contain", src: event.homeTeam.logo }), _jsxs("div", { children: [_jsx("h3", { className: "font-medium", children: event.homeTeam.name }), _jsxs("p", { className: "text-sm text-gray-600 dark:text-gray-400", children: ["Win Rate: ", formatPercentage(event.homeTeam.stats.winRate)] })] })] }), _jsxs("div", { className: "text-right", children: [_jsxs("p", { className: "font-medium", children: [event.homeTeam.stats.goalsScored, " Goals"] }), _jsxs("p", { className: "text-sm text-gray-600 dark:text-gray-400", children: [event.homeTeam.stats.cleanSheets, " Clean Sheets"] })] })] }), _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { className: "flex items-center space-x-4", children: [_jsx("img", { alt: event.awayTeam.name, className: "w-12 h-12 object-contain", src: event.awayTeam.logo }), _jsxs("div", { children: [_jsx("h3", { className: "font-medium", children: event.awayTeam.name }), _jsxs("p", { className: "text-sm text-gray-600 dark:text-gray-400", children: ["Win Rate: ", formatPercentage(event.awayTeam.stats.winRate)] })] })] }), _jsxs("div", { className: "text-right", children: [_jsxs("p", { className: "font-medium", children: [event.awayTeam.stats.goalsScored, " Goals"] }), _jsxs("p", { className: "text-sm text-gray-600 dark:text-gray-400", children: [event.awayTeam.stats.cleanSheets, " Clean Sheets"] })] })] })] })] }), _jsxs(Card, { children: [_jsx("h2", { className: "text-xl font-bold mb-4", children: "Venue & Weather" }), _jsxs("div", { className: "space-y-4", children: [_jsxs("div", { children: [_jsx("h3", { className: "font-medium", children: "Venue" }), _jsxs("p", { className: "text-gray-600 dark:text-gray-400", children: [event.venue.name, ", ", event.venue.city, ", ", event.venue.country] })] }), event.weather && (_jsxs("div", { children: [_jsx("h3", { className: "font-medium", children: "Weather" }), _jsxs("div", { className: "grid grid-cols-2 gap-4", children: [_jsxs("div", { children: [_jsx("p", { className: "text-sm text-gray-600 dark:text-gray-400", children: "Condition" }), _jsx("p", { children: event.weather.condition })] }), _jsxs("div", { children: [_jsx("p", { className: "text-sm text-gray-600 dark:text-gray-400", children: "Temperature" }), _jsxs("p", { children: [event.weather.temperature, "\u00B0C"] })] }), _jsxs("div", { children: [_jsx("p", { className: "text-sm text-gray-600 dark:text-gray-400", children: "Wind Speed" }), _jsxs("p", { children: [event.weather.windSpeed, " km/h"] })] }), _jsxs("div", { children: [_jsx("p", { className: "text-sm text-gray-600 dark:text-gray-400", children: "Precipitation" }), _jsxs("p", { children: [event.weather.precipitation, "%"] })] })] })] }))] })] }), _jsxs(Card, { children: [_jsx("h2", { className: "text-xl font-bold mb-4", children: "Head to Head" }), _jsxs("div", { className: "space-y-4", children: [_jsxs("div", { className: "grid grid-cols-3 gap-4 text-center", children: [_jsxs("div", { children: [_jsx("p", { className: "text-2xl font-bold", children: event.statistics.headToHead.homeWins }), _jsx("p", { className: "text-sm text-gray-600 dark:text-gray-400", children: "Home Wins" })] }), _jsxs("div", { children: [_jsx("p", { className: "text-2xl font-bold", children: event.statistics.headToHead.draws }), _jsx("p", { className: "text-sm text-gray-600 dark:text-gray-400", children: "Draws" })] }), _jsxs("div", { children: [_jsx("p", { className: "text-2xl font-bold", children: event.statistics.headToHead.awayWins }), _jsx("p", { className: "text-sm text-gray-600 dark:text-gray-400", children: "Away Wins" })] })] }), _jsxs("div", { children: [_jsx("h3", { className: "font-medium mb-2", children: "Last 5 Meetings" }), _jsx("div", { className: "space-y-2", children: event.statistics.headToHead.lastFive.map((match, index) => (_jsxs("div", { className: "flex items-center justify-between p-2 bg-gray-50 dark:bg-gray-800 rounded", children: [_jsx("div", { className: "flex-1", children: match.homeTeam }), _jsx("div", { className: "px-4 font-medium", children: match.score }), _jsx("div", { className: "flex-1 text-right", children: match.awayTeam })] }, index))) })] })] })] }), _jsxs(Card, { children: [_jsx("h2", { className: "text-xl font-bold mb-4", children: "Form & Trends" }), _jsxs("div", { className: "space-y-4", children: [_jsxs("div", { children: [_jsx("h3", { className: "font-medium mb-2", children: "Recent Form" }), _jsxs("div", { className: "grid grid-cols-2 gap-4", children: [_jsxs("div", { children: [_jsx("p", { className: "text-sm text-gray-600 dark:text-gray-400 mb-1", children: event.homeTeam.name }), _jsx("div", { className: "flex space-x-1", children: event.statistics.form.home.lastFive.map((result, index) => (_jsx(Badge, { variant: result === 'W' ? 'success' : result === 'D' ? 'warning' : 'danger', children: result }, index))) })] }), _jsxs("div", { children: [_jsx("p", { className: "text-sm text-gray-600 dark:text-gray-400 mb-1", children: event.awayTeam.name }), _jsx("div", { className: "flex space-x-1", children: event.statistics.form.away.lastFive.map((result, index) => (_jsx(Badge, { variant: result === 'W' ? 'success' : result === 'D' ? 'warning' : 'danger', children: result }, index))) })] })] })] }), _jsxs("div", { children: [_jsx("h3", { className: "font-medium mb-2", children: "Trends" }), _jsxs("div", { className: "grid grid-cols-2 gap-4", children: [_jsxs("div", { children: [_jsx("p", { className: "text-sm text-gray-600 dark:text-gray-400", children: "Over/Under 2.5" }), _jsxs("p", { className: "font-medium", children: ["Over: ", formatPercentage(event.statistics.trends.overUnder.over2_5), " \u2022 Under:", ' ', formatPercentage(event.statistics.trends.overUnder.under2_5)] })] }), _jsxs("div", { children: [_jsx("p", { className: "text-sm text-gray-600 dark:text-gray-400", children: "Both Teams to Score" }), _jsxs("p", { className: "font-medium", children: ["Yes: ", formatPercentage(event.statistics.trends.bothTeamsToScore.yes), " \u2022 No:", ' ', formatPercentage(event.statistics.trends.bothTeamsToScore.no)] })] })] })] })] })] })] })), activeTab === 'markets' && (_jsx("div", { className: "space-y-8", children: event.markets.map(market => (_jsxs(Card, { children: [_jsxs("div", { className: "flex items-center justify-between mb-4", children: [_jsx("h2", { className: "text-xl font-bold", children: market.name }), _jsx(Badge, { variant: market.status === 'open'
                                                ? 'success'
                                                : market.status === 'suspended'
                                                    ? 'warning'
                                                    : 'secondary', children: market.status.toUpperCase() })] }), _jsx("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4", children: market.selections.map(selection => (_jsxs("div", { className: "p-4 bg-gray-50 dark:bg-gray-800 rounded-lg", children: [_jsxs("div", { className: "flex items-center justify-between mb-2", children: [_jsx("span", { className: "font-medium", children: selection.name }), _jsx("span", { className: "text-lg font-bold", children: formatOdds(selection.odds) })] }), selection.prediction && (_jsxs("div", { className: "space-y-1 text-sm", children: [_jsxs("div", { className: "flex justify-between", children: [_jsx("span", { className: "text-gray-600 dark:text-gray-400", children: "Confidence" }), _jsx("span", { children: formatPercentage(selection.prediction.confidence) })] }), _jsxs("div", { className: "flex justify-between", children: [_jsx("span", { className: "text-gray-600 dark:text-gray-400", children: "Value" }), _jsx("span", { className: selection.prediction.expectedValue > 0
                                                                    ? 'text-green-600'
                                                                    : 'text-red-600', children: formatPercentage(selection.prediction.expectedValue) })] }), _jsxs("div", { className: "flex justify-between", children: [_jsx("span", { className: "text-gray-600 dark:text-gray-400", children: "Kelly" }), _jsx("span", { children: formatPercentage(selection.prediction.kellyFraction) })] })] })), _jsx(Button, { className: "w-full mt-4", disabled: market.status !== 'open', variant: "primary", onClick: () => {
                                                    setSelectedMarket(market);
                                                    setSelectedSelection(selection);
                                                    setShowBetModal(true);
                                                }, children: "Place Bet" })] }, selection.id))) })] }, market.id))) })), activeTab === 'statistics' && (_jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-8", children: [_jsxs(Card, { children: [_jsx("h2", { className: "text-xl font-bold mb-4", children: "Team Statistics" }), _jsxs("div", { className: "space-y-6", children: [_jsxs("div", { children: [_jsx("h3", { className: "font-medium mb-2", children: event.homeTeam.name }), _jsxs("div", { className: "space-y-2", children: [_jsxs("div", { className: "flex justify-between", children: [_jsx("span", { children: "Goals Scored" }), _jsx("span", { children: event.statistics.form.home.goalsScored })] }), _jsxs("div", { className: "flex justify-between", children: [_jsx("span", { children: "Goals Conceded" }), _jsx("span", { children: event.statistics.form.home.goalsConceded })] }), _jsxs("div", { className: "flex justify-between", children: [_jsx("span", { children: "Clean Sheets" }), _jsx("span", { children: event.homeTeam.stats.cleanSheets })] }), _jsxs("div", { className: "flex justify-between", children: [_jsx("span", { children: "Win Rate" }), _jsx("span", { children: formatPercentage(event.homeTeam.stats.winRate) })] })] })] }), _jsxs("div", { children: [_jsx("h3", { className: "font-medium mb-2", children: event.awayTeam.name }), _jsxs("div", { className: "space-y-2", children: [_jsxs("div", { className: "flex justify-between", children: [_jsx("span", { children: "Goals Scored" }), _jsx("span", { children: event.statistics.form.away.goalsScored })] }), _jsxs("div", { className: "flex justify-between", children: [_jsx("span", { children: "Goals Conceded" }), _jsx("span", { children: event.statistics.form.away.goalsConceded })] }), _jsxs("div", { className: "flex justify-between", children: [_jsx("span", { children: "Clean Sheets" }), _jsx("span", { children: event.awayTeam.stats.cleanSheets })] }), _jsxs("div", { className: "flex justify-between", children: [_jsx("span", { children: "Win Rate" }), _jsx("span", { children: formatPercentage(event.awayTeam.stats.winRate) })] })] })] })] })] }), _jsxs(Card, { children: [_jsx("h2", { className: "text-xl font-bold mb-4", children: "Match Statistics" }), _jsxs("div", { className: "space-y-6", children: [_jsxs("div", { children: [_jsx("h3", { className: "font-medium mb-2", children: "Goals" }), _jsxs("div", { className: "space-y-2", children: [_jsxs("div", { className: "flex justify-between", children: [_jsx("span", { children: "Average Goals per Game" }), _jsx("span", { children: event.statistics.trends.overUnder.averageGoals.toFixed(2) })] }), _jsxs("div", { className: "flex justify-between", children: [_jsx("span", { children: "Over 2.5 Goals" }), _jsx("span", { children: formatPercentage(event.statistics.trends.overUnder.over2_5) })] }), _jsxs("div", { className: "flex justify-between", children: [_jsx("span", { children: "Under 2.5 Goals" }), _jsx("span", { children: formatPercentage(event.statistics.trends.overUnder.under2_5) })] })] })] }), _jsxs("div", { children: [_jsx("h3", { className: "font-medium mb-2", children: "Both Teams to Score" }), _jsxs("div", { className: "space-y-2", children: [_jsxs("div", { className: "flex justify-between", children: [_jsx("span", { children: "Yes" }), _jsx("span", { children: formatPercentage(event.statistics.trends.bothTeamsToScore.yes) })] }), _jsxs("div", { className: "flex justify-between", children: [_jsx("span", { children: "No" }), _jsx("span", { children: formatPercentage(event.statistics.trends.bothTeamsToScore.no) })] })] })] }), _jsxs("div", { children: [_jsx("h3", { className: "font-medium mb-2", children: "First Half" }), _jsxs("div", { className: "space-y-2", children: [_jsxs("div", { className: "flex justify-between", children: [_jsx("span", { children: "Home Wins" }), _jsx("span", { children: formatPercentage(event.statistics.trends.firstHalf.homeWins) })] }), _jsxs("div", { className: "flex justify-between", children: [_jsx("span", { children: "Away Wins" }), _jsx("span", { children: formatPercentage(event.statistics.trends.firstHalf.awayWins) })] }), _jsxs("div", { className: "flex justify-between", children: [_jsx("span", { children: "Draws" }), _jsx("span", { children: formatPercentage(event.statistics.trends.firstHalf.draws) })] })] })] })] })] })] })), activeTab === 'predictions' && (_jsx("div", { className: "space-y-8", children: event.predictions.map((prediction, index) => (_jsxs(Card, { children: [_jsxs("div", { className: "flex items-center justify-between mb-4", children: [_jsxs("h2", { className: "text-xl font-bold", children: [prediction.marketType, " - ", prediction.selection] }), _jsxs(Badge, { variant: prediction.expectedValue > 0
                                                ? 'success'
                                                : prediction.expectedValue < 0
                                                    ? 'danger'
                                                    : 'warning', children: [formatPercentage(prediction.expectedValue), " Expected Value"] })] }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6", children: [_jsxs("div", { children: [_jsx("h3", { className: "font-medium mb-2", children: "Prediction Details" }), _jsxs("div", { className: "space-y-2", children: [_jsxs("div", { className: "flex justify-between", children: [_jsx("span", { children: "Confidence" }), _jsx("span", { children: formatPercentage(prediction.confidence) })] }), _jsxs("div", { className: "flex justify-between", children: [_jsx("span", { children: "Expected Value" }), _jsx("span", { className: prediction.expectedValue > 0 ? 'text-green-600' : 'text-red-600', children: formatPercentage(prediction.expectedValue) })] }), _jsxs("div", { className: "flex justify-between", children: [_jsx("span", { children: "Kelly Fraction" }), _jsx("span", { children: formatPercentage(prediction.kellyFraction) })] })] })] }), _jsxs("div", { children: [_jsx("h3", { className: "font-medium mb-2", children: "Factors" }), _jsx("div", { className: "space-y-2", children: prediction.factors.map((factor, factorIndex) => (_jsxs("div", { className: "p-2 bg-gray-50 dark:bg-gray-800 rounded", children: [_jsxs("div", { className: "flex justify-between mb-1", children: [_jsx("span", { className: "font-medium", children: factor.name }), _jsx("span", { className: factor.impact > 0 ? 'text-green-600' : 'text-red-600', children: formatPercentage(factor.impact) })] }), _jsx("p", { className: "text-sm text-gray-600 dark:text-gray-400", children: factor.description })] }, factorIndex))) })] })] })] }, index))) }))] }), _jsx(Modal, { isOpen: showBetModal, title: "Place Bet", onClose: () => setShowBetModal(false), children: selectedMarket && selectedSelection && (_jsxs("div", { className: "space-y-4", children: [_jsxs("div", { children: [_jsx("h3", { className: "font-medium mb-2", children: "Bet Details" }), _jsxs("div", { className: "space-y-2", children: [_jsxs("div", { className: "flex justify-between", children: [_jsx("span", { children: "Market" }), _jsx("span", { children: selectedMarket.name })] }), _jsxs("div", { className: "flex justify-between", children: [_jsx("span", { children: "Selection" }), _jsx("span", { children: selectedSelection.name })] }), _jsxs("div", { className: "flex justify-between", children: [_jsx("span", { children: "Odds" }), _jsx("span", { children: formatOdds(selectedSelection.odds) })] })] })] }), selectedSelection.prediction && (_jsxs("div", { children: [_jsx("h3", { className: "font-medium mb-2", children: "Prediction" }), _jsxs("div", { className: "space-y-2", children: [_jsxs("div", { className: "flex justify-between", children: [_jsx("span", { children: "Confidence" }), _jsx("span", { children: formatPercentage(selectedSelection.prediction.confidence) })] }), _jsxs("div", { className: "flex justify-between", children: [_jsx("span", { children: "Expected Value" }), _jsx("span", { className: selectedSelection.prediction.expectedValue > 0
                                                        ? 'text-green-600'
                                                        : 'text-red-600', children: formatPercentage(selectedSelection.prediction.expectedValue) })] }), _jsxs("div", { className: "flex justify-between", children: [_jsx("span", { children: "Recommended Stake" }), _jsx("span", { children: formatPercentage(selectedSelection.prediction.kellyFraction) })] })] })] })), _jsxs("div", { children: [_jsx("h3", { className: "font-medium mb-2", children: "Stake" }), _jsx(Input, { min: "0", placeholder: "Enter stake amount", step: "0.01", type: "number" })] }), _jsxs("div", { className: "flex justify-end space-x-4", children: [_jsx(Button, { variant: "secondary", onClick: () => setShowBetModal(false), children: "Cancel" }), _jsx(Button, { variant: "primary", onClick: () => {
                                        // Handle bet placement
                                        setShowBetModal(false);
                                    }, children: "Place Bet" })] })] })) }), toast && _jsx(Toast, { message: toast.message, type: toast.type, onClose: () => setToast(null) })] }));
};
