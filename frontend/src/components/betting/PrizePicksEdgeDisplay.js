import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Badge } from '@/components/ui/badge';
import { Tooltip } from '@/components/ui/Tooltip';
export const PrizePicksEdgeDisplay = ({ playerName, statType, line, overOdds, underOdds, confidence, expectedValue, kellyFraction, modelBreakdown, riskReasoning, traceId, showDebug = false, }) => {
    const isHighEV = expectedValue > 0.05;
    return (_jsxs("div", { className: "glass bg-gradient-to-br from-blue-100/60 to-green-100/40 rounded-xl p-4 shadow-lg flex flex-col gap-2 relative", children: [_jsxs("div", { className: "flex items-center gap-2", children: [_jsx("span", { className: "font-bold text-lg", children: playerName }), _jsx(Badge, { variant: "secondary", children: statType }), isHighEV && _jsx(Badge, { variant: "success", children: "High EV" })] }), _jsxs("div", { className: "flex items-center gap-4 text-sm", children: [_jsxs("span", { children: ["Line: ", _jsx("b", { children: line })] }), _jsxs("span", { children: ["Over: ", _jsx("b", { children: overOdds })] }), _jsxs("span", { children: ["Under: ", _jsx("b", { children: underOdds })] }), _jsxs(Badge, { variant: confidence >= 0.7 ? 'success' : confidence >= 0.5 ? 'warning' : 'danger', children: ["Confidence: ", (confidence * 100).toFixed(1), "%"] }), _jsxs(Badge, { variant: expectedValue > 0 ? 'success' : 'danger', children: ["EV: ", (expectedValue * 100).toFixed(1), "%"] }), _jsxs(Badge, { variant: "secondary", children: ["Kelly: ", (kellyFraction * 100).toFixed(1), "%"] })] }), modelBreakdown && (_jsx("div", { className: "flex flex-wrap gap-2 text-xs text-gray-600", children: Object.entries(modelBreakdown).map(([model, value]) => (_jsxs("span", { className: "bg-gray-200 rounded px-2 py-0.5", children: [model, ": ", value.toFixed(2)] }, model))) })), riskReasoning && riskReasoning.length > 0 && (_jsx("div", { className: "mt-2", children: _jsx(Tooltip, { content: _jsx("ul", { className: "text-xs max-w-xs", children: riskReasoning.map((r, i) => _jsx("li", { children: r }, i)) }), children: _jsx(Badge, { variant: "warning", className: "cursor-pointer", children: "Risk Reasoning" }) }) })), showDebug && traceId && (_jsxs("div", { className: "mt-2 text-xs text-gray-400", children: ["traceId: ", traceId] }))] }));
};
