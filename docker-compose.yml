version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: a1betting-postgres
    environment:
      POSTGRES_DB: ${A1BETTING_POSTGRES_DB:-a1betting}
      POSTGRES_USER: ${A1BETTING_POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${A1BETTING_POSTGRES_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${A1BETTING_POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - a1betting-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: a1betting-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test:
        [
          "CMD",
          "redis-cli",
          "--no-auth-warning",
          "-a",
          "${REDIS_PASSWORD:-redis123}",
          "ping",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - a1betting-network
    restart: unless-stopped

  # Main API Service
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: a1betting-backend
    environment:
      A1BETTING_ENVIRONMENT: ${A1BETTING_ENVIRONMENT:-production}
      A1BETTING_DATABASE_URL: postgresql://${A1BETTING_POSTGRES_USER:-postgres}:${A1BETTING_POSTGRES_PASSWORD:-password}@postgres:5432/${A1BETTING_POSTGRES_DB:-a1betting}
      A1BETTING_REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379
      A1BETTING_SPORTRADAR_API_KEY: ${A1BETTING_SPORTRADAR_API_KEY}
      A1BETTING_ODDS_API_KEY: ${A1BETTING_ODDS_API_KEY}
      A1BETTING_PRIZEPICKS_API_KEY: ${A1BETTING_PRIZEPICKS_API_KEY}
      A1BETTING_SECRET_KEY: ${A1BETTING_SECRET_KEY:-ultra-secure-secret-key-change-in-production}
      A1BETTING_HOST: ${A1BETTING_HOST:-0.0.0.0}
      A1BETTING_PORT: ${A1BETTING_PORT:-8000}
      A1BETTING_WORKERS: ${A1BETTING_WORKERS:-4}
      A1BETTING_LOG_LEVEL: ${A1BETTING_LOG_LEVEL:-info}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./models:/app/models:ro
      - ./logs:/app/logs
      - ./data:/app/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - a1betting-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: "1.5"
        reservations:
          memory: 1G
          cpus: "0.5"

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: a1betting-frontend
    environment:
      VITE_API_BASE_URL: ${VITE_API_BASE_URL:-http://localhost:8000}
      VITE_WS_URL: ${VITE_WS_URL:-ws://localhost:8000/ws}
      VITE_ENVIRONMENT: ${VITE_ENVIRONMENT:-production}
    ports:
      - "3000:3000"
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - a1betting-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"

  # Model Inference Service
  model-service:
    build:
      context: .
      dockerfile: Dockerfile
      target: model-server
    container_name: a1betting-models
    environment:
      A1BETTING_ENVIRONMENT: ${A1BETTING_ENVIRONMENT:-production}
      A1BETTING_DATABASE_URL: postgresql://${A1BETTING_POSTGRES_USER:-postgres}:${A1BETTING_POSTGRES_PASSWORD:-password}@postgres:5432/${A1BETTING_POSTGRES_DB:-a1betting}
      A1BETTING_REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379
      MODEL_CACHE_SIZE: ${MODEL_CACHE_SIZE:-1000}
      MODEL_WORKERS: ${MODEL_WORKERS:-2}
    ports:
      - "8001:8001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./models:/app/models:ro
      - ./logs:/app/logs
      - model_cache:/app/cache
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - a1betting-network
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: "2.0"
        reservations:
          memory: 2G
          cpus: "1.0"

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: a1betting-prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
      - "--web.enable-admin-api"
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - a1betting-network
    restart: unless-stopped
    depends_on:
      - backend

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: a1betting-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - a1betting-network
    restart: unless-stopped

  # Nginx Load Balancer and Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: a1betting-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
      - nginx_cache:/var/cache/nginx
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    networks:
      - a1betting-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Background Worker for Data Pipeline
  worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: a1betting-worker
    command:
      [
        "python",
        "-m",
        "celery",
        "worker",
        "-A",
        "tasks",
        "--loglevel=info",
        "--concurrency=4",
      ]
    environment:
      A1BETTING_ENVIRONMENT: ${A1BETTING_ENVIRONMENT:-production}
      A1BETTING_DATABASE_URL: postgresql://${A1BETTING_POSTGRES_USER:-postgres}:${A1BETTING_POSTGRES_PASSWORD:-password}@postgres:5432/${A1BETTING_POSTGRES_DB:-a1betting}
      A1BETTING_REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379
      A1BETTING_SPORTRADAR_API_KEY: ${A1BETTING_SPORTRADAR_API_KEY}
      A1BETTING_ODDS_API_KEY: ${A1BETTING_ODDS_API_KEY}
      A1BETTING_PRIZEPICKS_API_KEY: ${A1BETTING_PRIZEPICKS_API_KEY}
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379/1
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD:-redis123}@redis:6379/2
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    restart: unless-stopped
    networks:
      - a1betting-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "1.0"

  # Celery Beat Scheduler
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: a1betting-scheduler
    command:
      [
        "python",
        "-m",
        "celery",
        "beat",
        "-A",
        "tasks",
        "--loglevel=info",
        "--schedule=/app/celerybeat-schedule",
      ]
    environment:
      A1BETTING_ENVIRONMENT: ${A1BETTING_ENVIRONMENT:-production}
      A1BETTING_DATABASE_URL: postgresql://${A1BETTING_POSTGRES_USER:-postgres}:${A1BETTING_POSTGRES_PASSWORD:-password}@postgres:5432/${A1BETTING_POSTGRES_DB:-a1betting}
      A1BETTING_REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379/1
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD:-redis123}@redis:6379/2
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - celery_beat:/app
    restart: unless-stopped
    networks:
      - a1betting-network

  # Celery Flower (Monitoring)
  flower:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: a1betting-flower
    command: ["python", "-m", "celery", "flower", "-A", "tasks", "--port=5555"]
    environment:
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379/1
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD:-redis123}@redis:6379/2
      FLOWER_BASIC_AUTH: ${FLOWER_USER:-admin}:${FLOWER_PASSWORD:-flower123}
    ports:
      - "5555:5555"
    depends_on:
      - redis
      - worker
    networks:
      - a1betting-network
    restart: unless-stopped

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: a1betting-backup
    environment:
      PGPASSWORD: ${A1BETTING_POSTGRES_PASSWORD:-password}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    command: ["sh", "-c", "while true; do sleep 3600; sh /backup.sh; done"]
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - a1betting-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  model_cache:
    driver: local
  nginx_cache:
    driver: local
  celery_beat:
    driver: local

networks:
  a1betting-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Health check for the entire stack
x-healthcheck-common: &healthcheck-common
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 30s
